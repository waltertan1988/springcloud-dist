#!/usr/bin/env groovy

properties([gitLabConnection(''), [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5'))])

node {
	final def GITHUB_REPO = 'https://github.com/waltertan1988/springcloud-dist.git'
	final def MAVEN_TOOL = 'maven3.2.3'
	final def DOCKER_FILE_FOLDER = "${env.WORKSPACE}/${MODULE}/docker${env.BUILD_NUMBER}"
	final def SERVICE_PORT = '7110'
	final def IMAGE_NAME_TAG = "${DOCKER_REGISTRY}/${MODULE}:latest"
	try {
		stage('Checkout') {
			checkout([$class: 'GitSCM', branches: [[name: "${BRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: GITHUB_REPO]]])
		}

		stage('Maven Build') {
			def MAVEN_HOME = tool "${MAVEN_TOOL}"
			sh script: "${MAVEN_HOME}/bin/mvn -f ${env.WORKSPACE}/${MODULE} clean package -Dmaven.test.skip=true"
		}
		
		stage('Docker Image Build'){
			final def BUILD_VERSION = sh returnStdout: true, script: "cat ${env.WORKSPACE}/${MODULE}/pom.xml | grep '</version>' | awk -F '>' '{print \$2}'| awk -F '<' '{print \$1}'"
			sh script: """
				mkdir ${DOCKER_FILE_FOLDER}
				cp ${env.WORKSPACE}/Dockerfile ${DOCKER_FILE_FOLDER}
				cp ${env.WORKSPACE}/${MODULE}/target/${MODULE}-${BUILD_VERSION}.jar ${DOCKER_FILE_FOLDER}/${MODULE}-${BUILD_VERSION}.jar
			"""
		
			def existingImage = sh returnStdout: true, script: "sudo /usr/bin/docker image ls | grep ${MODULE}"
			if(existingImage != null && existingImage != ""){
			    sh script: "sudo /usr/bin/docker image rm ${IMAGE_NAME_TAG}"
			    //TODO 删除容器
			}
			
			sh script: "sudo /usr/bin/docker build -t ${IMAGE_NAME_TAG} --build-arg jarFile=${MODULE}-${BUILD_VERSION}.jar port=${SERVICE_PORT} ${DOCKER_FILE_FOLDER}"
		}
		
		stage('Docker Image Pull'){
			// 上传镜像
		}
		
		stage('Deployment'){
			// 部署
		}

		currentBuild.result = "SUCCESS"
	} catch (e) {
		println e.getMessage()
		currentBuild.result = "FAILURE"
	} finally{
		sh script: "rm -rf ${DOCKER_FILE_FOLDER}"
	}
}