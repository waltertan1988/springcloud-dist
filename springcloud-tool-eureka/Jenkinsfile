#!/usr/bin/env groovy
import groovy.transform.Field;
import java.util.HashSet;
import java.util.Set;

properties([gitLabConnection(''), [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false], buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5'))])

@Field final def GITHUB_REPO = 'https://github.com/waltertan1988/springcloud-dist.git'
@Field final def DOCKER_REGISTRY = 'centos7-tools:5000'
@Field final def MAVEN_TOOL = 'maven3.2.3'
@Field final def INFO_FORMAT = "[INFO] %s"

node {
	final def DOCKER_FILE_FOLDER = "${env.WORKSPACE}/${MODULE}/docker${env.BUILD_NUMBER}"
	final def DOCKER_IMAGE_REPO = "${DOCKER_REGISTRY}/${MODULE}"
    final def DOCKER_IMAGE_NAME = "${DOCKER_IMAGE_REPO}:latest"
    final def SERVICE_PORT = '7110'
    
	try {
		stage('SCM Checkout') {
			checkout([$class: 'GitSCM', branches: [[name: "${BRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'github', url: GITHUB_REPO]]])
		}

		stage('Maven Build') {
			// Maven打包
			
			final def MAVEN_HOME = tool "${MAVEN_TOOL}"
			sh script: """
				${MAVEN_HOME}/bin/mvn \
				-f ${env.WORKSPACE}/${MODULE} \
				clean package -Dmaven.test.skip=true
			"""
		}
		
		stage('Docker Image Build'){
			// 构建镜像
			
			final def BUILD_VERSION = getXmlValue("${env.WORKSPACE}/${MODULE}/pom.xml",'</version>')
			
			sh script: """
				mkdir ${DOCKER_FILE_FOLDER}
				cp ${env.WORKSPACE}/Dockerfile ${DOCKER_FILE_FOLDER}
				cp ${env.WORKSPACE}/${MODULE}/target/${MODULE}-${BUILD_VERSION}.jar ${DOCKER_FILE_FOLDER}
			"""
		
			Set existingImageIdSet = getImageIdSet("${MODULE}")
			if(existingImageIdSet.size() > 0){
				stopAndRemoveDockerContainer("${MODULE}")
				
				for(String existingImageId : existingImageIdSet){
					for(String existingContainerId : getContainerIdSet(existingImageId)){
						stopAndRemoveDockerContainer(existingContainerId)
					}
				}
				
				for(String existingImageId : existingImageIdSet){
					removeDockerImage(existingImageId)
				}
			}else{
				info("No need to clear image for module ${MODULE}")
			}
			
			sh script: """
				sudo /usr/bin/docker build \
				-t ${DOCKER_IMAGE_NAME} \
				--build-arg jarFile=${MODULE}-${BUILD_VERSION}.jar \
				--build-arg port=${SERVICE_PORT} \
				${DOCKER_FILE_FOLDER}
			"""
		}
		
		stage('Docker Image Push'){
			// 上传镜像
			sh script: "sudo docker image push ${DOCKER_IMAGE_NAME}"
		}
		
		stage('Deployment'){
			// 部署
			
		}

		currentBuild.result = "SUCCESS"
	} catch (e) {
		println e.getMessage()
		currentBuild.result = "FAILURE"
	} finally{
		sh script: "rm -rf ${DOCKER_FILE_FOLDER}"
	}
}

def getXmlValue(xml, tag){
	def value = sh returnStdout: true, script: "cat ${xml} | grep '${tag}' | awk -F '>' '{print \$2}'| awk -F '<' '{print \$1}' | tr '\\n' ' '"
	return value.trim()
}

def getImageIdSet(label){
	final def splitter = '|'
	def imageIds = sh returnStdout: true, script: "sudo docker image ls | grep '${label}' | awk -F ' ' '{print \$3}' | tr '\\n' '${splitter}'"
	info("imageIds=${imageIds}")
	
	Set resultSet = new HashSet()
	if(imageIds!=null && imageIds!=''){
		for(String id : imageIds.split("\\${splitter}")){
			resultSet.add(id)
		}
	}
	
	return resultSet
}

def getContainerIdSet(label){
	final def splitter = '|'
	def containerIds = sh returnStdout: true, script: "sudo docker ps -a | grep '${label}' | awk -F ' ' '{print \$1}' | tr '\\n' '${splitter}'"
	info("containerIds=${containerIds}")
	
	Set resultSet = new HashSet()
	if(containerIds!=null && containerIds!=''){
		for(String id : containerIds.split("\\${splitter}")){
			resultSet.add(id)
		}
	}
	
	return resultSet
}

def removeDockerImage(label){
	sh returnStatus: true, script: "sudo /usr/bin/docker image rm ${label}"
}

def stopAndRemoveDockerContainer(label){
	final def splitter = '|'
	def containerIdStr = sh returnStdout: true, script: "sudo /usr/bin/docker ps -a | grep '${label}' | awk -F ' ' '{print \$1}' | tr '\\n' '${splitter}'"
	info("containerIdStr=${containerIdStr}")
	
	if(containerIdStr!=null && containerIdStr!=''){
		for(String cid : containerIdStr.split("\\${splitter}")){
			info("stop and remove existing container: ${cid}")
			sh returnStatus: true, script: "sudo /usr/bin/docker container stop ${cid}"
			sh returnStatus: true, script: "sudo /usr/bin/docker container rm ${cid}"
		}
	}
}

@NonCPS
def info(msg){
	return println(String.format(INFO_FORMAT, msg))
}